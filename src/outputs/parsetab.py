
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DEF END ID INC INT MOVE REG REPEATprog : instr \n            | instr proginstr : cmd \n             | macdefcmd : incr \n           | mv \n           | rpt \n           | macincr : INC REGmv : REG MOVE REG \n          | REG MOVE INTrpt : REPEAT REG bodybody : innerbody ENDinnerbody : cmd \n                 | cmd innerbodymac : REG MOVE ID reglistmacdef : DEF ID reglist bodyreglist : REG \n               | REG reglist'
    
_lr_action_items = {'INC':([0,2,3,5,7,8,11,12,13,16,18,19,20,21,23,24,26,27,29,30,],[1,1,-3,-8,-7,-6,-5,-4,-9,1,-18,1,-12,1,-11,-10,-19,-17,-13,-16,]),'$end':([2,3,4,5,7,8,11,12,13,14,18,20,23,24,26,27,29,30,],[-1,-3,0,-8,-7,-6,-5,-4,-9,-2,-18,-12,-11,-10,-19,-17,-13,-16,]),'INT':([17,],[23,]),'REG':([0,1,2,3,5,7,8,9,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,29,30,],[10,13,10,-3,-8,-7,-6,16,-5,-4,-9,18,10,24,18,10,-12,10,-11,-10,18,-19,-17,-13,-16,]),'END':([5,7,8,11,13,18,20,21,22,23,24,26,28,29,30,],[-8,-7,-6,-5,-9,-18,-12,-14,29,-11,-10,-19,-15,-13,-16,]),'REPEAT':([0,2,3,5,7,8,11,12,13,16,18,19,20,21,23,24,26,27,29,30,],[9,9,-3,-8,-7,-6,-5,-4,-9,9,-18,9,-12,9,-11,-10,-19,-17,-13,-16,]),'MOVE':([10,],[17,]),'ID':([6,17,],[15,25,]),'DEF':([0,2,3,5,7,8,11,12,13,18,20,23,24,26,27,29,30,],[6,6,-3,-8,-7,-6,-5,-4,-9,-18,-12,-11,-10,-19,-17,-13,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'mv':([0,2,16,19,21,],[8,8,8,8,8,]),'reglist':([15,18,25,],[19,26,30,]),'body':([16,19,],[20,27,]),'macdef':([0,2,],[12,12,]),'innerbody':([16,19,21,],[22,22,28,]),'cmd':([0,2,16,19,21,],[3,3,21,21,21,]),'prog':([0,2,],[4,14,]),'mac':([0,2,16,19,21,],[5,5,5,5,5,]),'instr':([0,2,],[2,2,]),'incr':([0,2,16,19,21,],[11,11,11,11,11,]),'rpt':([0,2,16,19,21,],[7,7,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> instr','prog',1,'p_prog','rpt_syntax.py',95),
  ('prog -> instr prog','prog',2,'p_prog','rpt_syntax.py',96),
  ('instr -> cmd','instr',1,'p_instr','rpt_syntax.py',103),
  ('instr -> macdef','instr',1,'p_instr','rpt_syntax.py',104),
  ('cmd -> incr','cmd',1,'p_cmd','rpt_syntax.py',108),
  ('cmd -> mv','cmd',1,'p_cmd','rpt_syntax.py',109),
  ('cmd -> rpt','cmd',1,'p_cmd','rpt_syntax.py',110),
  ('cmd -> mac','cmd',1,'p_cmd','rpt_syntax.py',111),
  ('incr -> INC REG','incr',2,'p_incr','rpt_syntax.py',115),
  ('mv -> REG MOVE REG','mv',3,'p_mv','rpt_syntax.py',119),
  ('mv -> REG MOVE INT','mv',3,'p_mv','rpt_syntax.py',120),
  ('rpt -> REPEAT REG body','rpt',3,'p_rpt','rpt_syntax.py',124),
  ('body -> innerbody END','body',2,'p_body','rpt_syntax.py',128),
  ('innerbody -> cmd','innerbody',1,'p_innerbody','rpt_syntax.py',132),
  ('innerbody -> cmd innerbody','innerbody',2,'p_innerbody','rpt_syntax.py',133),
  ('mac -> REG MOVE ID reglist','mac',4,'p_mac','rpt_syntax.py',141),
  ('macdef -> DEF ID reglist body','macdef',4,'p_macdef','rpt_syntax.py',146),
  ('reglist -> REG','reglist',1,'p_reglist','rpt_syntax.py',150),
  ('reglist -> REG reglist','reglist',2,'p_reglist','rpt_syntax.py',151),
]
