
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DEF END ID INC INT MOVE REG REPEATprog : instr \n            | instr proginstr : cmd \n             | macdefcmd : incr \n           | mv \n           | rpt \n           | macincr : INC REGmv : REG MOVE REG \n          | REG MOVE INTrpt : REPEAT REG bodybody : innerbody ENDinnerbody : cmd \n                 | cmd innerbodymac : REG MOVE ID reglistmacdef : DEF ID reglist bodyreglist : REG \n               | REG reglist'
    
_lr_action_items = {'INC':([0,1,2,4,5,6,8,11,14,16,18,19,20,22,24,25,26,27,28,30,],[3,-8,3,-4,-6,-7,-5,-3,-9,3,3,-18,-12,3,-11,-10,-17,-19,-13,-16,]),'INT':([17,],[24,]),'DEF':([0,1,2,4,5,6,8,11,14,19,20,24,25,26,27,28,30,],[9,-8,9,-4,-6,-7,-5,-3,-9,-18,-12,-11,-10,-17,-19,-13,-16,]),'END':([1,5,6,8,14,19,20,21,22,24,25,27,28,29,30,],[-8,-6,-7,-5,-9,-18,-12,28,-14,-11,-10,-19,-13,-15,-16,]),'REPEAT':([0,1,2,4,5,6,8,11,14,16,18,19,20,22,24,25,26,27,28,30,],[10,-8,10,-4,-6,-7,-5,-3,-9,10,10,-18,-12,10,-11,-10,-17,-19,-13,-16,]),'$end':([1,2,4,5,6,7,8,11,13,14,19,20,24,25,26,27,28,30,],[-8,-1,-4,-6,-7,0,-5,-3,-2,-9,-18,-12,-11,-10,-17,-19,-13,-16,]),'MOVE':([12,],[17,]),'ID':([9,17,],[15,23,]),'REG':([0,1,2,3,4,5,6,8,10,11,14,15,16,17,18,19,20,22,23,24,25,26,27,28,30,],[12,-8,12,14,-4,-6,-7,-5,16,-3,-9,19,12,25,12,19,-12,12,19,-11,-10,-17,-19,-13,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'incr':([0,2,16,18,22,],[8,8,8,8,8,]),'mac':([0,2,16,18,22,],[1,1,1,1,1,]),'reglist':([15,19,23,],[18,27,30,]),'body':([16,18,],[20,26,]),'macdef':([0,2,],[4,4,]),'mv':([0,2,16,18,22,],[5,5,5,5,5,]),'cmd':([0,2,16,18,22,],[11,11,22,22,22,]),'instr':([0,2,],[2,2,]),'rpt':([0,2,16,18,22,],[6,6,6,6,6,]),'innerbody':([16,18,22,],[21,21,29,]),'prog':([0,2,],[7,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> instr','prog',1,'p_prog','rpt_syntax.py',94),
  ('prog -> instr prog','prog',2,'p_prog','rpt_syntax.py',95),
  ('instr -> cmd','instr',1,'p_instr','rpt_syntax.py',102),
  ('instr -> macdef','instr',1,'p_instr','rpt_syntax.py',103),
  ('cmd -> incr','cmd',1,'p_cmd','rpt_syntax.py',107),
  ('cmd -> mv','cmd',1,'p_cmd','rpt_syntax.py',108),
  ('cmd -> rpt','cmd',1,'p_cmd','rpt_syntax.py',109),
  ('cmd -> mac','cmd',1,'p_cmd','rpt_syntax.py',110),
  ('incr -> INC REG','incr',2,'p_incr','rpt_syntax.py',114),
  ('mv -> REG MOVE REG','mv',3,'p_mv','rpt_syntax.py',118),
  ('mv -> REG MOVE INT','mv',3,'p_mv','rpt_syntax.py',119),
  ('rpt -> REPEAT REG body','rpt',3,'p_rpt','rpt_syntax.py',123),
  ('body -> innerbody END','body',2,'p_body','rpt_syntax.py',127),
  ('innerbody -> cmd','innerbody',1,'p_innerbody','rpt_syntax.py',131),
  ('innerbody -> cmd innerbody','innerbody',2,'p_innerbody','rpt_syntax.py',132),
  ('mac -> REG MOVE ID reglist','mac',4,'p_mac','rpt_syntax.py',140),
  ('macdef -> DEF ID reglist body','macdef',4,'p_macdef','rpt_syntax.py',145),
  ('reglist -> REG','reglist',1,'p_reglist','rpt_syntax.py',149),
  ('reglist -> REG reglist','reglist',2,'p_reglist','rpt_syntax.py',150),
]
