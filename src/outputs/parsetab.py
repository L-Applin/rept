
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DEF END ID INC INT MOVE REG REPEATprog : instr \n            | instr proginstr : cmd \n             | macdefcmd : incr \n           | mv \n           | rpt \n           | macincr : INC REGmv : REG MOVE REG \n          | REG MOVE INTrpt : REPEAT REG bodybody : innerbody ENDinnerbody : cmd \n                 | cmd innerbodymac : REG MOVE ID reglistmacdef : DEF ID reglist bodyreglist : REG \n               | REG reglist'
    
_lr_action_items = {'DEF':([0,1,3,4,9,10,11,12,15,19,21,23,25,26,27,29,30,],[2,-7,-3,-8,-4,-5,-6,2,-9,-18,-12,-11,-10,-17,-19,-13,-16,]),'REPEAT':([0,1,3,4,9,10,11,12,14,15,18,19,20,21,23,25,26,27,29,30,],[5,-7,-3,-8,-4,-5,-6,5,5,-9,5,-18,5,-12,-11,-10,-17,-19,-13,-16,]),'END':([1,4,10,11,15,19,20,21,22,23,25,27,28,29,30,],[-7,-8,-5,-6,-9,-18,-14,-12,29,-11,-10,-19,-15,-13,-16,]),'INT':([16,],[23,]),'ID':([2,16,],[13,24,]),'MOVE':([8,],[16,]),'REG':([0,1,3,4,5,6,9,10,11,12,13,14,15,16,18,19,20,21,23,24,25,26,27,29,30,],[8,-7,-3,-8,14,15,-4,-5,-6,8,19,8,-9,25,8,19,8,-12,-11,19,-10,-17,-19,-13,-16,]),'$end':([1,3,4,7,9,10,11,12,15,17,19,21,23,25,26,27,29,30,],[-7,-3,-8,0,-4,-5,-6,-1,-9,-2,-18,-12,-11,-10,-17,-19,-13,-16,]),'INC':([0,1,3,4,9,10,11,12,14,15,18,19,20,21,23,25,26,27,29,30,],[6,-7,-3,-8,-4,-5,-6,6,6,-9,6,-18,6,-12,-11,-10,-17,-19,-13,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rpt':([0,12,14,18,20,],[1,1,1,1,1,]),'body':([14,18,],[21,26,]),'reglist':([13,19,24,],[18,27,30,]),'cmd':([0,12,14,18,20,],[3,3,20,20,20,]),'innerbody':([14,18,20,],[22,22,28,]),'macdef':([0,12,],[9,9,]),'incr':([0,12,14,18,20,],[10,10,10,10,10,]),'mv':([0,12,14,18,20,],[11,11,11,11,11,]),'mac':([0,12,14,18,20,],[4,4,4,4,4,]),'instr':([0,12,],[12,12,]),'prog':([0,12,],[7,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> instr','prog',1,'p_prog','rpt_syntax.py',94),
  ('prog -> instr prog','prog',2,'p_prog','rpt_syntax.py',95),
  ('instr -> cmd','instr',1,'p_instr','rpt_syntax.py',102),
  ('instr -> macdef','instr',1,'p_instr','rpt_syntax.py',103),
  ('cmd -> incr','cmd',1,'p_cmd','rpt_syntax.py',107),
  ('cmd -> mv','cmd',1,'p_cmd','rpt_syntax.py',108),
  ('cmd -> rpt','cmd',1,'p_cmd','rpt_syntax.py',109),
  ('cmd -> mac','cmd',1,'p_cmd','rpt_syntax.py',110),
  ('incr -> INC REG','incr',2,'p_incr','rpt_syntax.py',114),
  ('mv -> REG MOVE REG','mv',3,'p_mv','rpt_syntax.py',118),
  ('mv -> REG MOVE INT','mv',3,'p_mv','rpt_syntax.py',119),
  ('rpt -> REPEAT REG body','rpt',3,'p_rpt','rpt_syntax.py',123),
  ('body -> innerbody END','body',2,'p_body','rpt_syntax.py',127),
  ('innerbody -> cmd','innerbody',1,'p_innerbody','rpt_syntax.py',131),
  ('innerbody -> cmd innerbody','innerbody',2,'p_innerbody','rpt_syntax.py',132),
  ('mac -> REG MOVE ID reglist','mac',4,'p_mac','rpt_syntax.py',140),
  ('macdef -> DEF ID reglist body','macdef',4,'p_macdef','rpt_syntax.py',145),
  ('reglist -> REG','reglist',1,'p_reglist','rpt_syntax.py',149),
  ('reglist -> REG reglist','reglist',2,'p_reglist','rpt_syntax.py',150),
]
